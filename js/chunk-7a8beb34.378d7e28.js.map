{"version":3,"sources":["webpack:///./src/views/Tags.vue?8963","webpack:///./src/components/ArticleItem.vue?b865","webpack:///src/components/ArticleItem.vue","webpack:///./src/components/ArticleItem.vue?65a6","webpack:///../../../src/components/VHover/VHover.ts","webpack:///../../../src/components/VLazy/VLazy.ts","webpack:///./src/components/ArticleItem.vue","webpack:///src/views/Tags.vue","webpack:///./src/views/Tags.vue?9679","webpack:///./src/views/Tags.vue","webpack:///./src/components/ArticleItem.vue?ef9a","webpack:///./src/mdConfig/main.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","tabs","scopedSlots","_u","key","fn","ref","currentItem","_l","article","directives","name","rawName","value","all","lang","expression","title","tag","index","content","staticRenderFns","staticClass","hover","$route","path","_v","_s","staticStyle","currentTime","tab","colorList","omit","props","type","String","default","Array","Number","data","computed","date","Date","toDateString","cutStr","substr","methods","mixins","disabled","undefined","$scopedSlots","element","isActive","mouseenter","mouseleave","onMouseLeave","intersect","options","root","rootMargin","threshold","transition","measurableStyles","children","h","handler","on","style","styles","component","VCard","VCardText","VCardTitle","VChip","VHover","VLazy","components","BlogTab","ArticleItem","config","env","str","console","log","articleList","display"],"mappings":"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","file":"js/chunk-7a8beb34.378d7e28.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('blog-tab',{attrs:{\"tab-titles\":_vm.tabs},scopedSlots:_vm._u([{key:\"default\",fn:function(ref){\nvar currentItem = ref.currentItem;\nreturn _vm._l((_vm.config),function(article){return _c('v-card-text',{directives:[{name:\"show\",rawName:\"v-show\",value:(currentItem===_vm.all||currentItem===article.lang),expression:\"currentItem===all||currentItem===article.lang\"}],key:article.title},[_c('article-item',{attrs:{\"tabs\":article.tag,\"index\":article.index,\"title\":article.title,\"content\":article.content}})],1)})}}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"d-flex justify-center\"},[_c('v-lazy',[_c('v-hover',{scopedSlots:_vm._u([{key:\"default\",fn:function(ref){\nvar hover = ref.hover;\nreturn [_c('v-card',{staticClass:\"ma-6 pa-4 article-card\",attrs:{\"max-width\":\"1000\",\"elevation\":hover?13:2,\"href\":'#'+_vm.$route.path+'/article/'+_vm.index}},[_c('v-card-title',{staticClass:\"ml-2 article-title\"},[_c('div',[_vm._v(_vm._s(_vm.title))])]),_c('v-card-text',{staticClass:\"ml-2\",staticStyle:{\"font-size\":\"9px\",\"color\":\"#948c9c\"}},[_vm._v(_vm._s(_vm.currentTime))]),_c('v-card-title',_vm._l((_vm.tabs),function(tab,index){return _c('v-chip',{key:tab,staticClass:\"ml-2\",attrs:{\"color\":_vm.colorList[index%6]}},[_vm._v(_vm._s(tab)+\" \")])}),1),_c('v-card-text',{staticClass:\"ml-2\"},[_vm._v(_vm._s(_vm.omit))])],1)]}}])})],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"d-flex justify-center\">\r\n\r\n    <v-lazy>\r\n      <v-hover v-slot=\"{hover}\">\r\n        <v-card class=\"ma-6 pa-4 article-card\" max-width=\"1000\" :elevation=\"hover?13:2\"\r\n                :href=\"'#'+$route.path+'/article/'+index\">\r\n          <v-card-title class=\"ml-2 article-title\">\r\n            <div>{{ title }}</div>\r\n          </v-card-title>\r\n          <v-card-text style=\"font-size: 9px;color: #948c9c\" class=\"ml-2\">{{ currentTime }}</v-card-text>\r\n          <v-card-title>\r\n            <v-chip v-for=\"(tab,index) in tabs\" :color=\"colorList[index%6]\" :key=\"tab\"\r\n                    class=\"ml-2\"\r\n            >{{ tab }}\r\n            </v-chip>\r\n          </v-card-title>\r\n          <v-card-text class=\"ml-2\" style=\"\">{{ omit }}</v-card-text>\r\n        </v-card>\r\n      </v-hover>\r\n    </v-lazy>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"ArticleList\",\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      default: \"未接收到标题\"\r\n    },\r\n    content: {\r\n      type: String,\r\n      default: \"未接收到文章的内容\"\r\n    },\r\n    tabs: {\r\n      type: Array\r\n    },\r\n    index: {\r\n      type: Number\r\n    }\r\n  },\r\n  data: () => ({\r\n    colorList: ['default', 'primary', 'secondary', 'orange', 'red', 'green']\r\n  }),\r\n  computed: {\r\n    currentTime() {\r\n      let date = new Date().toDateString()\r\n\r\n      return date\r\n    },\r\n    omit() {\r\n      let cutStr = this.content.substr(0, 150) + \"...\"\r\n      return cutStr\r\n    }\r\n  },\r\n  methods: {}\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.article-title:hover {\r\n  color: red;\r\n  cursor: pointer;\r\n}\r\n\r\n\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ArticleItem.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ArticleItem.vue?vue&type=script&lang=js&\"","// Mixins\nimport Delayable from '../../mixins/delayable'\nimport Toggleable from '../../mixins/toggleable'\n\n// Utilities\nimport mixins from '../../util/mixins'\nimport { consoleWarn } from '../../util/console'\n\n// Types\nimport { VNode, ScopedSlotChildren } from 'vue/types/vnode'\n\nexport default mixins(\n  Delayable,\n  Toggleable\n  /* @vue/component */\n).extend({\n  name: 'v-hover',\n\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    value: {\n      type: Boolean,\n      default: undefined,\n    },\n  },\n\n  methods: {\n    onMouseEnter () {\n      this.runDelay('open')\n    },\n    onMouseLeave () {\n      this.runDelay('close')\n    },\n  },\n\n  render (): VNode {\n    if (!this.$scopedSlots.default && this.value === undefined) {\n      consoleWarn('v-hover is missing a default scopedSlot or bound value', this)\n\n      return null as any\n    }\n\n    let element: VNode | ScopedSlotChildren\n\n    /* istanbul ignore else */\n    if (this.$scopedSlots.default) {\n      element = this.$scopedSlots.default({ hover: this.isActive })\n    }\n\n    if (Array.isArray(element) && element.length === 1) {\n      element = element[0]\n    }\n\n    if (!element || Array.isArray(element) || !element.tag) {\n      consoleWarn('v-hover should only contain a single element', this)\n\n      return element as any\n    }\n\n    if (!this.disabled) {\n      element.data = element.data || {}\n      this._g(element.data, {\n        mouseenter: this.onMouseEnter,\n        mouseleave: this.onMouseLeave,\n      })\n    }\n\n    return element\n  },\n})\n","// Mixins\nimport Measurable from '../../mixins/measurable'\nimport Toggleable from '../../mixins/toggleable'\n\n// Directives\nimport intersect from '../../directives/intersect'\n\n// Utilities\nimport mixins from '../../util/mixins'\nimport { getSlot } from '../../util/helpers'\n\n// Types\nimport { VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nexport default mixins(\n  Measurable,\n  Toggleable\n).extend({\n  name: 'VLazy',\n\n  directives: { intersect },\n\n  props: {\n    options: {\n      type: Object,\n      // For more information on types, navigate to:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n      default: () => ({\n        root: undefined,\n        rootMargin: undefined,\n        threshold: undefined,\n      }),\n    } as PropValidator<IntersectionObserverInit>,\n    tag: {\n      type: String,\n      default: 'div',\n    },\n    transition: {\n      type: String,\n      default: 'fade-transition',\n    },\n  },\n\n  computed: {\n    styles (): object {\n      return {\n        ...this.measurableStyles,\n      }\n    },\n  },\n\n  methods: {\n    genContent () {\n      const children = this.isActive && getSlot(this)\n\n      return this.transition\n        ? this.$createElement('transition', {\n          props: { name: this.transition },\n        }, children)\n        : children\n    },\n    onObserve (\n      entries: IntersectionObserverEntry[],\n      observer: IntersectionObserver,\n      isIntersecting: boolean,\n    ) {\n      if (this.isActive) return\n\n      this.isActive = isIntersecting\n    },\n  },\n\n  render (h): VNode {\n    return h(this.tag, {\n      staticClass: 'v-lazy',\n      attrs: this.$attrs,\n      directives: [{\n        name: 'intersect',\n        value: {\n          handler: this.onObserve,\n          options: this.options,\n        },\n      }],\n      on: this.$listeners,\n      style: this.styles,\n    }, [this.genContent()])\n  },\n})\n","import { render, staticRenderFns } from \"./ArticleItem.vue?vue&type=template&id=a232c6f2&scoped=true&\"\nimport script from \"./ArticleItem.vue?vue&type=script&lang=js&\"\nexport * from \"./ArticleItem.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ArticleItem.vue?vue&type=style&index=0&id=a232c6f2&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"a232c6f2\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VCard } from 'vuetify/lib/components/VCard';\nimport { VCardText } from 'vuetify/lib/components/VCard';\nimport { VCardTitle } from 'vuetify/lib/components/VCard';\nimport { VChip } from 'vuetify/lib/components/VChip';\nimport { VHover } from 'vuetify/lib/components/VHover';\nimport { VLazy } from 'vuetify/lib/components/VLazy';\ninstallComponents(component, {VCard,VCardText,VCardTitle,VChip,VHover,VLazy})\n","<template>\r\n  <blog-tab v-bind:tab-titles=\"tabs\">\r\n    <template v-slot=\"{currentItem}\">\r\n      <v-card-text v-for=\"article in config\" :key=\"article.title\"\r\n                   v-show=\"currentItem===all||currentItem===article.lang\">\r\n        <article-item :tabs=\"article.tag\" :index=\"article.index\"\r\n                      :title=\"article.title\" :content=\"article.content\"></article-item>\r\n      </v-card-text>\r\n    </template>\r\n  </blog-tab>\r\n</template>\r\n<script>\r\nimport ArticleItem from \"../components/ArticleItem\";\r\nimport list from \"../mdConfig/main.js\"\r\nimport BlogTab from \"../components/BlogTab\";\r\n\r\nexport default {\r\n  name: \"Tags\",\r\n  components: {\r\n    BlogTab,\r\n    ArticleItem\r\n  },\r\n  data: () => ({\r\n    config: list.articleList,\r\n    tabs: [\"all\", \"java\", \"go\", \"python\", \"javascript\"],\r\n    all: \"all\",\r\n  }),\r\n  methods: {\r\n    printInfo(env, str) {\r\n      console.log(str)\r\n    }\r\n  },\r\n}\r\n</script>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tags.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tags.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Tags.vue?vue&type=template&id=3638b0c4&\"\nimport script from \"./Tags.vue?vue&type=script&lang=js&\"\nexport * from \"./Tags.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VCardText } from 'vuetify/lib/components/VCard';\ninstallComponents(component, {VCardText})\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ArticleItem.vue?vue&type=style&index=0&id=a232c6f2&scoped=true&lang=css&\"","export default {\r\n    articleList: [\r\n        {\r\n            index: 0,\r\n            title: \"猴子选大王问题\",\r\n            tag: [\"java\", \"base\"],\r\n            lang: \"java\",\r\n            display: \"n个猴子围成一圈，从编号为k的开始报数1-2-m-1-2-m-……报“m”的猴子就被淘汰，游戏一直进行到圈内只剩一只猴子它就是猴大王了。 想了很长时间不会,问了@Spider-gty，得知用两个一维数组模拟圈可以解决，下面是代码：\" +\r\n                \"<div>\\n\" +\r\n                \"    <hello-world></hello-world>\\n\" +\r\n                \"</div>\",\r\n            content: \"n个猴子围成一圈，从编号为k的开始报数1-2-m-1-2-m-……报“m”的猴子就被淘汰，游戏一直进行到圈内只剩一只猴子它就是猴大王了。\\n\" +\r\n                \"想了很长时间不会,问了@Spider-gty，得知用两个一维数组模拟圈可以解决，下面是代码：\\n\" +\r\n                \"```java\\n\" +\r\n                \"class MonkeyProblem \\n\" +\r\n                \"{\\n\" +\r\n                \"\\tpublic static void main(String[] args) \\n\" +\r\n                \"\\t{\\n\" +\r\n                \"\\t\\tint k=17;\\n\" +\r\n                \"\\t\\tint[] last=new int[k+1];\\n\" +\r\n                \"\\t\\tint[] next=new int[k+1];\\n\" +\r\n                \"\\t\\tlast[1]=k;next[1]=2;\\n\" +\r\n                \"\\t\\tlast[k]=k-1;next[k]=1;\\n\" +\r\n                \"\\t\\tfor(int i=2;i<=k-1;i++)\\n\" +\r\n                \"\\t\\t{\\n\" +\r\n                \"\\t\\t\\tlast[i]=i-1;\\n\" +\r\n                \"\\t\\t    next[i]=i+1;\\n\" +\r\n                \"\\t\\t}\\n\" +\r\n                \"\\t    \\n\" +\r\n                \"\\t\\tint result=solve(last,next,1,10);\\n\" +\r\n                \"\\t\\tSystem.out.println(result);\\n\" +\r\n                \"\\t\\t\\n\" +\r\n                \"\\t}\\n\" +\r\n                \"    //  Find the correct monkey;\\n\" +\r\n                \"    //模拟报数过程\\n\" +\r\n                \"\\tstatic int count(int[] l,int[] n,int k,int m)\\n\" +\r\n                \"\\t\\t//l是上一个，n是下一个，k是某位置开始，m是往下数多少位\\n\" +\r\n                \"\\t{\\n\" +\r\n                \"\\t\\t \\n\" +\r\n                \"         if(m==1) return  k;\\n\" +\r\n                \"         k=n[k];\\n\" +\r\n                \"         return count(l,n,k,m-1);\\n\" +\r\n                \"\\t}\\n\" +\r\n                \"\\t//模拟淘汰过程，opted指被选中报到m的猴子\\n\" +\r\n                \"\\tstatic void eliminate(int[] l,int[] n,int opted)\\n\" +\r\n                \"\\t{\\n\" +\r\n                \"\\t\\tn[l[opted]]=n[opted];\\n\" +\r\n                \"\\t\\tl[n[opted]]=l[opted];\\n\" +\r\n                \"\\t}\\n\" +\r\n                \"\\tstatic int solve(int[] l,int[] n,int k ,int m)\\n\" +\r\n                \"\\t{\\n\" +\r\n                \"\\t\\tif(n[k]==k) return k;\\n\" +\r\n                \"\\t\\tint opted=count(l,n,k,m);\\n\" +\r\n                \"\\t\\teliminate(l,n,opted);\\n\" +\r\n                \"\\t\\tint next=n[opted];\\n\" +\r\n                \"\\t\\treturn solve(l,n,next,m);\\n\" +\r\n                \"\\t}\\t\\n\" +\r\n                \"}\\n\" +\r\n                \"```\\n\" +\r\n                \"···························································································\\n\" +\r\n                \"事实上，过多的使用递归会影响程序的性能；按照这个思路，程序可以简化。\\n\" +\r\n                \"C++版本:\\n\" +\r\n                \"\\n\" +\r\n                \"```c++\\n\" +\r\n                \"#include <iostream>\\n\" +\r\n                \"\\n\" +\r\n                \"void initialize(int *last, int *next, int length);\\n\" +\r\n                \"\\n\" +\r\n                \"int solve(int *, int *, int &, int &);\\n\" +\r\n                \"\\n\" +\r\n                \"int main() {\\n\" +\r\n                \"    std::cout<<\\\"输入猴子的数量:\\\"<<std::endl;\\n\" +\r\n                \"    int monkey_mount;\\n\" +\r\n                \"    std::cin>>monkey_mount;\\n\" +\r\n                \"    int ls[monkey_mount];\\n\" +\r\n                \"    int nt[monkey_mount];\\n\" +\r\n                \"    initialize(ls, nt, monkey_mount);\\n\" +\r\n                \"    int startMonkey = 0;\\n\" +\r\n                \"    int epoch_length = 8;\\n\" +\r\n                \"    std::cout << solve(ls, nt, startMonkey, epoch_length) << std::endl;\\n\" +\r\n                \"\\treturn 0;\\n\" +\r\n                \"}\\n\" +\r\n                \"\\n\" +\r\n                \"void initialize(int *last, int *next, int length) {\\n\" +\r\n                \"    for (int i = 1; i < length - 1; ++i) {\\n\" +\r\n                \"        last[i] = i - 1;\\n\" +\r\n                \"        next[i] = i + 1;\\n\" +\r\n                \"    }\\n\" +\r\n                \"    last[0] = length - 1;\\n\" +\r\n                \"    next[0] = 1;\\n\" +\r\n                \"    last[length - 1] = length - 2;\\n\" +\r\n                \"    next[length - 1] = 0;\\n\" +\r\n                \"}\\n\" +\r\n                \"\\n\" +\r\n                \"int solve(int *last, int *next, int &startMonkey, int &epoch_length) {\\n\" +\r\n                \"    int monkey = startMonkey;\\n\" +\r\n                \"    while (next[monkey] != monkey) {\\n\" +\r\n                \"        for (int i = 1; i < epoch_length; i++)\\n\" +\r\n                \"            monkey = next[monkey];\\n\" +\r\n                \"        next[last[monkey]] = next[monkey];\\n\" +\r\n                \"        last[next[monkey]] = last[monkey];\\n\" +\r\n                \"        printf(\\\"本轮淘汰第%d个猴\\\\n\\\", monkey);\\n\" +\r\n                \"        monkey = next[monkey];\\n\" +\r\n                \"    }\\n\" +\r\n                \"    return monkey;\\n\" +\r\n                \"}\\n\" +\r\n                \"```\\n\" +\r\n                \"\\n\" +\r\n                \"node版本\\n\" +\r\n                \"\\n\" +\r\n                \"```js\\n\" +\r\n                \"const readline = require('readline').createInterface({\\n\" +\r\n                \"    input: process.stdin,\\n\" +\r\n                \"    output: process.stdout\\n\" +\r\n                \"})\\n\" +\r\n                \"readline.question(\\\"输入猴子的数量\\\\n\\\", answer => {\\n\" +\r\n                \"    let next = [];\\n\" +\r\n                \"    let last = [];\\n\" +\r\n                \"    initialize(last, next, answer)\\n\" +\r\n                \"    console.log(`最终的猴子王是${solve(last, next, 0, answer)}`)\\n\" +\r\n                \"})\\n\" +\r\n                \"\\n\" +\r\n                \"\\n\" +\r\n                \"function initialize(last, next, length) {\\n\" +\r\n                \"    for (let i = 1; i < length - 1; i++) {\\n\" +\r\n                \"        last[i] = i - 1;\\n\" +\r\n                \"        next[i] = i + 1;\\n\" +\r\n                \"    }\\n\" +\r\n                \"    last[0] = length - 1;\\n\" +\r\n                \"    next[0] = 1;\\n\" +\r\n                \"    last[length - 1] = length - 2;\\n\" +\r\n                \"    next[length - 1] = 0;\\n\" +\r\n                \"}\\n\" +\r\n                \"\\n\" +\r\n                \"function solve(last, next, startMonkey, epoch_length) {\\n\" +\r\n                \"    let monkey = startMonkey;\\n\" +\r\n                \"    while (next[monkey] !== monkey) {\\n\" +\r\n                \"        for (let i = 1; i < epoch_length; i++)\\n\" +\r\n                \"            monkey = next[monkey];\\n\" +\r\n                \"        next[last[monkey]] = next[monkey];\\n\" +\r\n                \"        last[next[monkey]] = last[monkey];\\n\" +\r\n                \"        console.log(`本轮淘汰第${monkey}个猴子`)\\n\" +\r\n                \"        monkey = next[monkey];\\n\" +\r\n                \"    }\\n\" +\r\n                \"    return monkey;\\n\" +\r\n                \"}\\n\" +\r\n                \"```\\n\" +\r\n                \"\\n\" +\r\n                \"Go语言版:\\n\" +\r\n                \"\\n\" +\r\n                \"```go\\n\" +\r\n                \"package main\\n\" +\r\n                \"\\n\" +\r\n                \"import (\\n\" +\r\n                \"\\t\\\"bufio\\\"\\n\" +\r\n                \"\\t\\\"fmt\\\"\\n\" +\r\n                \"\\t\\\"os\\\"\\n\" +\r\n                \"\\t\\\"strconv\\\"\\n\" +\r\n                \")\\n\" +\r\n                \"\\n\" +\r\n                \"func main() {\\n\" +\r\n                \"\\tfmt.Printf(\\\"输入猴子的数量:\\\\n\\\")\\n\" +\r\n                \"\\tscanner := bufio.NewScanner(os.Stdin)\\n\" +\r\n                \"\\tscanner.Scan()\\n\" +\r\n                \"\\tmonkeyMount, _ := strconv.Atoi(scanner.Text())\\n\" +\r\n                \"\\tfmt.Printf(\\\"输入起始猴子的位置(从0开始):\\\\n\\\")\\n\" +\r\n                \"\\tscanner.Scan()\\n\" +\r\n                \"\\tstartMonkey, _ := strconv.Atoi(scanner.Text())\\n\" +\r\n                \"\\tfmt.Printf(\\\"输入猴子数数的步长:\\\\n\\\")\\n\" +\r\n                \"\\tscanner.Scan()\\n\" +\r\n                \"\\tepochStep, _ := strconv.Atoi(scanner.Text())\\n\" +\r\n                \"\\tlast := make([]int, monkeyMount, monkeyMount)\\n\" +\r\n                \"\\tnext := make([]int, monkeyMount, monkeyMount)\\n\" +\r\n                \"\\tinitialize(last, next, monkeyMount)\\n\" +\r\n                \"\\tfmt.Printf(\\\"最终的猴子王是%d\\\", solve(last, next, startMonkey, epochStep))\\n\" +\r\n                \"}\\n\" +\r\n                \"\\n\" +\r\n                \"func initialize(last []int, next []int, length int) {\\n\" +\r\n                \"\\tfor i := 1; i < length-1; i++ {\\n\" +\r\n                \"\\t\\tlast[i] = i - 1\\n\" +\r\n                \"\\t\\tnext[i] = i + 1\\n\" +\r\n                \"\\t}\\n\" +\r\n                \"\\tlast[0] = length - 1\\n\" +\r\n                \"\\tnext[0] = 1\\n\" +\r\n                \"\\tlast[length-1] = length - 2\\n\" +\r\n                \"\\tnext[length-1] = 0\\n\" +\r\n                \"}\\n\" +\r\n                \"\\n\" +\r\n                \"func solve(last []int, next []int, startMonkey int, epochLength int) int {\\n\" +\r\n                \"\\tmonkey := startMonkey\\n\" +\r\n                \"\\tfor monkey != next[monkey] {\\n\" +\r\n                \"\\t\\tfor i := 1; i < epochLength; i++ {\\n\" +\r\n                \"\\t\\t\\tmonkey = next[monkey]\\n\" +\r\n                \"\\t\\t}\\n\" +\r\n                \"\\t\\tnext[last[monkey]] = next[monkey]\\n\" +\r\n                \"\\t\\tlast[next[monkey]] = last[monkey]\\n\" +\r\n                \"\\t\\tfmt.Printf(\\\"本轮淘汰第%d个猴子\\\\n\\\", monkey)\\n\" +\r\n                \"\\t\\tmonkey = next[monkey]\\n\" +\r\n                \"\\t}\\n\" +\r\n                \"\\treturn monkey\\n\" +\r\n                \"}\\n\" +\r\n                \"\\n\" +\r\n                \"```\\n\" +\r\n                \"最简单是当然是kotlin\\n\" +\r\n                \"\\n\" +\r\n                \"```kotlin\\n\" +\r\n                \"package com.wang.binarySearch\\n\" +\r\n                \"\\n\" +\r\n                \"import java.util.*\\n\" +\r\n                \"\\n\" +\r\n                \"fun main() {\\n\" +\r\n                \"    val scanner = Scanner(System.`in`)\\n\" +\r\n                \"    println(\\\"猴子的数量为:\\\")\\n\" +\r\n                \"    val monkeyMount = scanner.nextInt()\\n\" +\r\n                \"    println(\\\"猴子开始数数位置为:\\\")\\n\" +\r\n                \"    val startMonkey = scanner.nextInt()\\n\" +\r\n                \"    println(\\\"猴子数数的步长是:\\\")\\n\" +\r\n                \"    val countStep = scanner.nextInt()\\n\" +\r\n                \"    val last = Array(monkeyMount) { i: Int -> if (i == 0) monkeyMount - 1 else i - 1 }\\n\" +\r\n                \"    val next = Array(monkeyMount) { i: Int -> if (i == monkeyMount - 1) 0 else i + 1 }\\n\" +\r\n                \"    println(\\\"猴子王是:${solve(last, next, startMonkey, countStep)}\\\")\\n\" +\r\n                \"}\\n\" +\r\n                \"\\n\" +\r\n                \"fun solve(last: Array<Int>, next: Array<Int>, startMonkey: Int, epochLength: Int): Int {\\n\" +\r\n                \"    var monkey = startMonkey\\n\" +\r\n                \"    while (monkey != next[monkey]) {\\n\" +\r\n                \"        repeat(epochLength - 1) { monkey = next[monkey] }\\n\" +\r\n                \"        last[next[monkey]] = last[monkey]\\n\" +\r\n                \"        next[last[monkey]] = next[monkey]\\n\" +\r\n                \"        println(\\\"本轮淘汰第 $monkey 个猴子\\\")\\n\" +\r\n                \"        monkey = next[monkey]\\n\" +\r\n                \"    }\\n\" +\r\n                \"    return monkey\\n\" +\r\n                \"}\\n\" +\r\n                \"```\\n\"\r\n        },\r\n        {\r\n            index: 1,\r\n            title: \"Matplotlib绘图\",\r\n            tag: [\"python\", \"base\"],\r\n            lang: \"python\",\r\n            display: \"Matplotlib的绘图功能\\n\" +\r\n                \"@TOC\\n\" +\r\n                \"\\n\" +\r\n                \"1.条形图\\n\" +\r\n                \"import matplotlib.pyplot as plt\\n\" +\r\n                \"\\n\" +\r\n                \"data = [5, 20, 15, 25, 10]\\n\" +\r\n                \"\\n\" +\r\n                \"plt.bar(range(len(data)), data)\\n\" +\r\n                \"plt.show()\\n\" +\r\n                \"bar(left, height, width=0.8, bottom=None, **kwargs)\",\r\n            content: \"\\n\" +\r\n                \"\\n\" +\r\n                \"# Matplotlib的绘图功能\\n\" +\r\n                \"\\n\" +\r\n                \"\\n\" +\r\n                \"</font>\\n\" +\r\n                \"\\n\" +\r\n                \"\\n\" +\r\n                \"@[TOC](文章目录)\\n\" +\r\n                \"\\n\" +\r\n                \"## 1.条形图\\n\" +\r\n                \"\\n\" +\r\n                \"```python\\n\" +\r\n                \"import matplotlib.pyplot as plt\\n\" +\r\n                \"\\n\" +\r\n                \"data = [5, 20, 15, 25, 10]\\n\" +\r\n                \"\\n\" +\r\n                \"plt.bar(range(len(data)), data)\\n\" +\r\n                \"plt.show()\\n\" +\r\n                \"```\\n\" +\r\n                \"\\n\" +\r\n                \"```python\\n\" +\r\n                \"bar(left, height, width=0.8, bottom=None, **kwargs)\\n\" +\r\n                \"```\\n\" +\r\n                \"\\n\" +\r\n                \"![在这里插入图片描述](https://img-blog.csdnimg.cn/20201118001059567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ3MjAyNTE4,size_16,color_FFFFFF,t_70#pic_center)\\n\" +\r\n                \"\\n\" +\r\n                \"可以通过增加关键字对条形图进行修饰：\\n\" +\r\n                \"\\n\" +\r\n                \"1. 颜色\\n\" +\r\n                \"\\n\" +\r\n                \"   facecolor(或fc)：用于设置柱体的颜色\\n\" +\r\n                \"\\n\" +\r\n                \"   通过 color 关键字参数 可以一次性设置多个颜色，color是一个数组\\n\" +\r\n                \"\\n\" +\r\n                \"2. 描边\\n\" +\r\n                \"\\n\" +\r\n                \"   - edgecolor 或 ec：描边的颜色，如white,black,blue\\n\" +\r\n                \"   - linestyle 或 ls:   描边的样式，如 \\\"-\\\" , \\\"--\\\";\\n\" +\r\n                \"   - linewidth 或 lw:描边的宽度 ：\\n\" +\r\n                \"\\n\" +\r\n                \"3. 填充\\n\" +\r\n                \"\\n\" +\r\n                \"   hatch ：hatch的值用于设置填充条形图的图形，如 \\\"X\\\", \\\"o\\\" ,\\\"/\\\" ;\\n\" +\r\n                \"\\n\" +\r\n                \"   ==注意：hatch的长个数表示填充的密度，如\\\"////////\\\"表示用\\\"/\\\"密集得填充==\\n\" +\r\n                \"\\n\" +\r\n                \"4. 误差线\\n\" +\r\n                \"\\n\" +\r\n                \"   ```python\\n\" +\r\n                \"   yerr： 定义误差的浮动的绝对值\\n\" +\r\n                \"   error_kw: 误差线关键字，是一个字典\\n\" +\r\n                \"   关键字有：\\n\" +\r\n                \"   ecolor:误差线的颜色\\n\" +\r\n                \"   elinewidth: 误差线的宽度，即粗细\\n\" +\r\n                \"   capsize: 误差线帽子的长度\\n\" +\r\n                \"   ```\\n\" +\r\n                \"\\n\" +\r\n                \"   \\n\" +\r\n                \"\\n\" +\r\n                \"5. 图例位置\\n\" +\r\n                \"\\n\" +\r\n                \"   ```python\\n\" +\r\n                \"   pyplot.legend(**ky)\\n\" +\r\n                \"   \\n\" +\r\n                \"   #loc: 可选'best','upper left','bottom right' 等\\n\" +\r\n                \"   #bbox_to_anchor=(0.2, 1),以左下角为为原点，调整位置\\n\" +\r\n                \"   #bbox_transform=ax.transAxes\\n\" +\r\n                \"   #frameon: 图例是否有边框\\n\" +\r\n                \"   #下面的操作由于修改边框的颜色\\n\" +\r\n                \"   leg = plt.legend()\\n\" +\r\n                \"   leg.get_frame().set_edgecolor('b') \\n\" +\r\n                \"   \\n\" +\r\n                \"   ```\\n\" +\r\n                \"\\n\" +\r\n                \"6. 合并图例\\n\" +\r\n                \"\\n\" +\r\n                \"   ```python\\n\" +\r\n                \"   #得到坐标轴1图例的句柄和标签值\\n\" +\r\n                \"   handles_1, labels_1 = ax1.get_legend_handles_labels()\\n\" +\r\n                \"   #得到坐标轴2图例的句柄和标签值\\n\" +\r\n                \"   handles_2, labels_2 = ax2.get_legend_handles_labels()\\n\" +\r\n                \"   #关键字传入,传入label（一个数组）参数可以改变图例的标签值\\n\" +\r\n                \"   plt.legend(handles=handles_1 + handles_2, bbox_to_anchor=(0.1, 1))\\n\" +\r\n                \"   ```\\n\" +\r\n                \"\\n\" +\r\n                \"7. 设置刻度线标签（tick label）\\n\" +\r\n                \"\\n\" +\r\n                \"   ```python\\n\" +\r\n                \"   import matplotlib.pyplot as plt\\n\" +\r\n                \"   \\n\" +\r\n                \"   data = [5, 20, 15, 25, 10]\\n\" +\r\n                \"   labels = ['Tom', 'Dick', 'Harry', 'Slim', 'Jim']\\n\" +\r\n                \"   \\n\" +\r\n                \"   plt.bar(range(len(data)), data, tick_label=labels)\\n\" +\r\n                \"   plt.show()\\n\" +\r\n                \"   ```\\n\" +\r\n                \"\\n\" +\r\n                \"   ![img](https://img-blog.csdnimg.cn/img_convert/e57e86d46c213253314d581b86f04f87.png)\\n\" +\r\n                \"\\n\" +\r\n                \"\\n\" +\r\n                \"\\n\" +\r\n                \"示例：\\n\" +\r\n                \"\\n\" +\r\n                \"```python\\n\" +\r\n                \"import matplotlib.pyplot as plt\\n\" +\r\n                \"\\n\" +\r\n                \"labels = [0.3, 0.5, 1.0, 1.5, 3.0]\\n\" +\r\n                \"bottom_means = [20, 80, 160, 250, 400]\\n\" +\r\n                \"top_means = [210, 250, 1200, 1500, 2600]\\n\" +\r\n                \"top_std = [20, 40, 80, 200, 500]\\n\" +\r\n                \"width = 0.15  # the width of the bars: can also be len(x) sequence\\n\" +\r\n                \"\\n\" +\r\n                \"#subplots是将多个图画到同一个平面上得工具,在matlab也有同样的函数\\n\" +\r\n                \"\\n\" +\r\n                \"fig, ax = plt.subplots()\\n\" +\r\n                \"ax.bar(labels, bottom_means, width, color='white', edgecolor='black', ls='-', lw=1, hatch='////', label='PFOA in water')\\n\" +\r\n                \"ax.bar(labels, top_means, width, color='white', edgecolor='black', ls='-', lw=1, yerr=top_std, bottom=bottom_means,\\n\" +\r\n                \"       hatch='xx',\\n\" +\r\n                \"       label='PFOA on SS')\\n\" +\r\n                \"#设置y轴上得标签值\\n\" +\r\n                \"ax.set_ylabel('PFOA amount (g)')\\n\" +\r\n                \"#设置图标的标题\\n\" +\r\n                \"ax.set_title('Initial PFOA concentration (mg/L)')\\n\" +\r\n                \"#设置图例，loc=location，指的是图例的位置\\n\" +\r\n                \"ax.legend(loc='upper left')\\n\" +\r\n                \"\\n\" +\r\n                \"plt.show()\\n\" +\r\n                \"```\\n\" +\r\n                \"\\n\" +\r\n                \"### 绘制其他样式的柱形图\\n\" +\r\n                \"\\n\" +\r\n                \"* ##### 水平的条形图\\n\" +\r\n                \"\\n\" +\r\n                \"  ```python\\n\" +\r\n                \"  import matplotlib.pyplot as plt\\n\" +\r\n                \"  \\n\" +\r\n                \"  data = [5, 20, 15, 25, 10]\\n\" +\r\n                \"  \\n\" +\r\n                \"  plt.barh(range(len(data)), data)\\n\" +\r\n                \"  plt.show()\\n\" +\r\n                \"  ```\\n\" +\r\n                \"\\n\" +\r\n                \"  ![preview](https://img-blog.csdnimg.cn/img_convert/4464a1a847ac9c9b974a0cf05e56ddcf.png)\\n\" +\r\n                \"\\n\" +\r\n                \"* **正负条形图**\\n\" +\r\n                \"\\n\" +\r\n                \"```python\\n\" +\r\n                \"import numpy as np\\n\" +\r\n                \"import matplotlib.pyplot as plt\\n\" +\r\n                \"\\n\" +\r\n                \"a = np.array([5, 20, 15, 25, 10])\\n\" +\r\n                \"b = np.array([10, 15, 20, 15, 5])\\n\" +\r\n                \"\\n\" +\r\n                \"plt.barh(range(len(a)), a)\\n\" +\r\n                \"plt.barh(range(len(b)), -b)\\n\" +\r\n                \"plt.show()\\n\" +\r\n                \"```\\n\" +\r\n                \"\\n\" +\r\n                \"![img](https://img-blog.csdnimg.cn/img_convert/9a96e59146eac268d4a28d68641a0c83.png)\\n\" +\r\n                \"\\n\" +\r\n                \"## 2.误差线\\n\" +\r\n                \"\\n\" +\r\n                \"#### 坐标轴参数\\n\" +\r\n                \"\\n\" +\r\n                \"1. 设置双Y坐标轴\\n\" +\r\n                \"\\n\" +\r\n                \"   ```python\\n\" +\r\n                \"   ax2 = plt.twinx()\\n\" +\r\n                \"   ```\\n\" +\r\n                \"\\n\" +\r\n                \"   ==主要通过twinx(\\t)方法创建出另一个坐标轴，此时在下面画图将会以右侧纵坐标为准==\\n\" +\r\n                \"\\n\" +\r\n                \"2. 修改坐标轴的范围\\n\" +\r\n                \"\\n\" +\r\n                \"   ```python\\n\" +\r\n                \"   pyplot.ylim(ymax=400)\\n\" +\r\n                \"   pyplot.ylim(ymin=10)\\n\" +\r\n                \"   pyplot.xlim(xmax=10)\\n\" +\r\n                \"   ```\\n\" +\r\n                \"\\n\" +\r\n                \"3. 设置坐标轴刻度的参数\\n\" +\r\n                \"\\n\" +\r\n                \"   ```python\\n\" +\r\n                \"   pyplot.tick_params(which='major', direction='in', length=6)\\n\" +\r\n                \"   #可选关键字\\n\" +\r\n                \"   #可选参数which:选择major or minor\\n\" +\r\n                \"   #direction:刻度的朝向，可选in or out\\n\" +\r\n                \"   #length: 刻度的长度\\n\" +\r\n                \"   #width: 刻度的宽度\\n\" +\r\n                \"   #size : 刻度标签的大小\\n\" +\r\n                \"   #axis: 指定是纵坐标还是，横坐标，可选xaxis or yaxis\\n\" +\r\n                \"   #colors:刻度标签的颜色\\n\" +\r\n                \"   ```\\n\" +\r\n                \"\\n\" +\r\n                \"   ```python\\n\" +\r\n                \"   axis.xaxis.set_minor_locator(MultipleLocator(0.25))\\n\" +\r\n                \"   #设置纵坐标或者横坐标的次纵坐标的位置，上面表示每个0.25画一个次纵坐标\\n\" +\r\n                \"   ```\\n\" +\r\n                \"\\n\" +\r\n                \"4. 设置坐标轴颜色\\n\" +\r\n                \"\\n\" +\r\n                \"   ```python\\n\" +\r\n                \"   axis.spines['bottom'].set_color('red')\\n\" +\r\n                \"   #设置坐标轴的颜色，可选参数top or bottom or left or right\\n\" +\r\n                \"   ```\\n\" +\r\n                \"\\n\" +\r\n                \"5. 隐藏坐标轴\\n\" +\r\n                \"\\n\" +\r\n                \"   ```python\\n\" +\r\n                \"   #隐藏y轴坐标\\n\" +\r\n                \"   plt.gca().get_yaxis().set_visible(False)\\n\" +\r\n                \"   #隐藏x轴坐标\\n\" +\r\n                \"   plt.gca().get_xaxis().set_visible(False)\\n\" +\r\n                \"   ```\\n\" +\r\n                \"\\n\" +\r\n                \"#### plot方法\\n\" +\r\n                \"\\n\" +\r\n                \"* **plot([x], y, [fmt], data=None, ****kwargs**)**\\n\" +\r\n                \"\\n\" +\r\n                \"  fmt：可选参数[fmt] 是一个字符串来定义图的基本属性如：颜色（color），点型（marker），线型（linestyle）\\n\" +\r\n                \"\\n\" +\r\n                \"  具体形式  fmt = '\\\\[color]\\\\[marker][line]'\\n\" +\r\n                \"\\n\" +\r\n                \"  参考了：[matplotlib.pyplot.plot()参数详解](https://blog.csdn.net/sinat_36219858/article/details/79800460)\\n\" +\r\n                \"\\n\" +\r\n                \"  ```pyt\\n\" +\r\n                \"  plot(x, y, 'bo-')  # 蓝色圆点实线\\n\" +\r\n                \"  ```\\n\" +\r\n                \"\\n\" +\r\n                \"  color: 线的颜色\\n\" +\r\n                \"\\n\" +\r\n                \"  marker: 点的形状\\n\" +\r\n                \"\\n\" +\r\n                \"  line: 线的形状\\n\" +\r\n                \"\\n\" +\r\n                \"  ```python\\n\" +\r\n                \"  \\t#maker的可选值\\n\" +\r\n                \"      =============    ===============================\\n\" +\r\n                \"      character        description\\n\" +\r\n                \"      =============    ===============================\\n\" +\r\n                \"      ``'.'``          point marker\\n\" +\r\n                \"      ``','``          pixel marker\\n\" +\r\n                \"      ``'o'``          circle marker\\n\" +\r\n                \"      ``'v'``          triangle_down marker\\n\" +\r\n                \"      ``'^'``          triangle_up marker\\n\" +\r\n                \"      ``'<'``          triangle_left marker\\n\" +\r\n                \"      ``'>'``          triangle_right marker\\n\" +\r\n                \"      ``'1'``          tri_down marker\\n\" +\r\n                \"      ``'2'``          tri_up marker\\n\" +\r\n                \"      ``'3'``          tri_left marker\\n\" +\r\n                \"      ``'4'``          tri_right marker\\n\" +\r\n                \"      ``'s'``          square marker\\n\" +\r\n                \"      ``'p'``          pentagon marker\\n\" +\r\n                \"      ``'*'``          star marker\\n\" +\r\n                \"      ``'h'``          hexagon1 marker\\n\" +\r\n                \"      ``'H'``          hexagon2 marker\\n\" +\r\n                \"      ``'+'``          plus marker\\n\" +\r\n                \"      ``'x'``          x marker\\n\" +\r\n                \"      ``'D'``          diamond marker\\n\" +\r\n                \"      ``'d'``          thin_diamond marker\\n\" +\r\n                \"      ``'|'``          vline marker\\n\" +\r\n                \"      ``'_'``          hline marker\\n\" +\r\n                \"      =============    ===============================\\n\" +\r\n                \"  ```\\n\" +\r\n                \"\\n\" +\r\n                \"  \\n\" +\r\n                \"\\n\" +\r\n                \"  ```python\\n\" +\r\n                \"  #line的可选值\\n\" +\r\n                \"  =============    ===============================\\n\" +\r\n                \"  character        description\\n\" +\r\n                \"  =============    ===============================\\n\" +\r\n                \"  ``'-'``          solid line style 实线\\n\" +\r\n                \"  ``'--'``         dashed line style 虚线\\n\" +\r\n                \"  ``'-.'``         dash-dot line style 点画线\\n\" +\r\n                \"  ``':'``          dotted line style 点线\\n\" +\r\n                \"  =============    ===============================\\n\" +\r\n                \"  ```\\n\" +\r\n                \"\\n\" +\r\n                \"  ==如果不选maker，那么只是直接连线==\\n\" +\r\n                \"\\n\" +\r\n                \"  * **其他关键字**\\n\" +\r\n                \"\\n\" +\r\n                \"    ```python\\n\" +\r\n                \"    lw(linewidth):线的宽度（粗细）\\n\" +\r\n                \"    c(color):线的颜色\\n\" +\r\n                \"    ls(linestyle):线的样式\\n\" +\r\n                \"    marker:折点的形状\\n\" +\r\n                \"    markeredgecolor 或 mec -- 折点外边颜色\\n\" +\r\n                \"    markeredgewidth 或 mew -- 折点线宽\\n\" +\r\n                \"    markerfacecolor 或 mfc --折点实心颜色\\n\" +\r\n                \"    markerfacecoloralt 或 mfcalt\\n\" +\r\n                \"    markersize 或 ms --折点大小\\n\" +\r\n                \"    ```\\n\" +\r\n                \"\\n\" +\r\n                \"    \\n\" +\r\n                \"\\n\" +\r\n                \"#### errorbar方法\\n\" +\r\n                \"\\n\" +\r\n                \"errorabar方法专门用来作误差线，但它无法很好的定义连线的参数，因此可以与plot方法配合使用。\\n\" +\r\n                \"\\n\" +\r\n                \"```python\\n\" +\r\n                \"errorbar(x, y,**kwargs)\\n\" +\r\n                \"#x,y 绘图的点\\n\" +\r\n                \"#关键字：\\n\" +\r\n                \"#xerr,yerr: 数据的误差范围\\n\" +\r\n                \"#fmt: 数据点的标记样式以及相互之间连接线样式\\n\" +\r\n                \"#ecolor: 误差棒的线条颜色\\n\" +\r\n                \"#elinewidth: 误差棒的线条粗细\\n\" +\r\n                \"#capsize: 误差棒边界横杠的大小\\n\" +\r\n                \"#capthick: 误差棒边界横杠的厚度\\n\" +\r\n                \"#ms(markersize): 数据点的大小\\n\" +\r\n                \"#mfc: 数据点的颜色\\n\" +\r\n                \"#mec: 数据点边缘的颜色\\n\" +\r\n                \"```\\n\" +\r\n                \"\\n\" +\r\n                \"## 3.文字注释\\n\" +\r\n                \"#### text方法\\n\" +\r\n                \"\\n\" +\r\n                \"​\\t\\t==text方法专门用来向图表中添加文字==\\n\" +\r\n                \"\\n\" +\r\n                \"```python\\n\" +\r\n                \"pyplot.text(-3, 40, \\\"要添加的内容\\\"（可以使用Latex语法），**keyword)\\n\" +\r\n                \"# 可选的关键字：\\n\" +\r\n                \"# alpha 设置字体的透明度\\n\" +\r\n                \"# family 设置字体\\n\" +\r\n                \"# size 设置字体的大小\\n\" +\r\n                \"# style 设置字体的风格\\n\" +\r\n                \"# wight 字体的粗细\\n\" +\r\n                \"# bbox 给字体添加框，alpha 设置框体的透明度， facecolor 设置框体的颜色\\n\" +\r\n                \"```\\n\" +\r\n                \"\\n\" +\r\n                \"#### figtext方法\\n\" +\r\n                \"\\n\" +\r\n                \" \\t\\tfigtext方法可以向图标中任意位置添加文字\\n\" +\r\n                \"\\n\" +\r\n                \"```python\\n\" +\r\n                \"#使用figtext()\\n\" +\r\n                \"x = np.arange(0, 2*np.pi, 0.01)\\n\" +\r\n                \"plt.plot(np.sin(x))\\n\" +\r\n                \"plt.figtext(0.5, 0.5, \\\"sin(0)=0\\\")  # 使用figtext时，x,y代表相对值，表示图片的宽高\\n\" +\r\n                \"plt.show()\\n\" +\r\n                \"```\\n\" +\r\n                \"\\n\" +\r\n                \"\\n\" +\r\n                \"\\n\" +\r\n                \"#### annotate方法\\n\" +\r\n                \"\\n\" +\r\n                \"​\\t\\tannoatate方法可以添加箭头\\n\" +\r\n                \"\\n\" +\r\n                \"```python\\n\" +\r\n                \"plt.figure(figsize=(6, 6))\\n\" +\r\n                \"x = np.random.randint(0, 10, size=10)\\n\" +\r\n                \"x[5] = 30    # 对x中索引值为5的重新赋值\\n\" +\r\n                \"plt.plot(x)\\n\" +\r\n                \"plt.ylim([-2, 35])\\n\" +\r\n                \"# plt.annotate(text=\\\"this point is important\\\", xy=(5, 30), xytext=(6, 31),arrowprops={\\\"width\\\": 2, \\\"headlength\\\": 5, \\\"headwidth\\\": 5, \\\"shrink\\\": 0.1})\\n\" +\r\n                \"plt.annotate(s=\\\"this point is important\\\", xy=(5, 30), xytext=(6, 31),arrowprops={\\\"arrowstyle\\\":\\\"->\\\"}) \\n\" +\r\n                \"# 如果arrowprops中有arrowstyle,就不应该有其他的属性，\\n\" +\r\n                \"#xy代表的是箭头的位置，xytext代表的是箭头文本的位置。\\n\" +\r\n                \"plt.show()\\n\" +\r\n                \"#箭头参数：\\n\" +\r\n                \"#text : \\\"string\\\"\\n\" +\r\n                \"\\t\\n\" +\r\n                \"#xy: 箭头的坐标\\n\" +\r\n                \"\\t\\n\" +\r\n                \"#xytext: 文字的坐标\\n\" +\r\n                \"\\t\\n\" +\r\n                \"#arrowprops: 箭头的属性，字典类型：\\n\" +\r\n                \"#下面是箭头的属性：\\n\" +\r\n                \"#headlength:箭头头部的长度\\n\" +\r\n                \"\\n\" +\r\n                \"#headwidth:箭头头部的宽度\\n\" +\r\n                \"\\t\\n\" +\r\n                \"#facecolor：箭头颜色\\n\" +\r\n                \"\\t\\n\" +\r\n                \"#shrink:箭头的长度（两坐标距离的比例，0~1）\\n\" +\r\n                \"\\t\\n\" +\r\n                \"#width:箭头的宽度\\n\" +\r\n                \"```\\n\" +\r\n                \"\\n\" +\r\n                \"==箭头的样式：==\\n\" +\r\n                \"\\n\" +\r\n                \"![在这里插入图片描述](https://img-blog.csdnimg.cn/20190930094144180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hIRzIwMTcxMjI2,size_16,color_FFFFFF,t_70)\\n\" +\r\n                \"### 其他例子\\n\" +\r\n                \"\\n\" +\r\n                \"```python\\n\" +\r\n                \"import numpy as np\\n\" +\r\n                \"import matplotlib.pyplot as plt\\n\" +\r\n                \"from matplotlib.ticker import MultipleLocator\\n\" +\r\n                \"# x轴坐标\\n\" +\r\n                \"x = [0, 1, 2, 5, 8, 10, 15]\\n\" +\r\n                \"# 曲线1的y轴坐标\\n\" +\r\n                \"y1 = [188, 135, 108, 80, 74, 70, 74]\\n\" +\r\n                \"# 右侧曲线y轴的缩放系数\\n\" +\r\n                \"k = 7 / 200\\n\" +\r\n                \"# 右侧曲线的y轴值\\n\" +\r\n                \"y2 = [178 * k, 125 * k, 96 * k, 65 * k, 48 * k, 38 * k, 43 * k]\\n\" +\r\n                \"y3 = [18, 15, 13, 9, 7, 5, 6]\\n\" +\r\n                \"y4 = [0, 55, 76, 110, 126, 140, 132]\\n\" +\r\n                \"# 生成子图和图像\\n\" +\r\n                \"fig, ax1 = plt.subplots()\\n\" +\r\n                \"# 绘制误差线，并用字典加以修饰\\n\" +\r\n                \"# $x^2$这是使用Latex渲染\\n\" +\r\n                \"ax1.errorbar(x, y1, yerr=7, lw=1, ecolor='k', color='k', marker='o', mfc='w', ms=10,\\n\" +\r\n                \"             capsize=3, mec='k', label=\\\"$SS$\\\")\\n\" +\r\n                \"ax1.errorbar(x, y3, yerr=7, lw=1, ecolor='k', color='k', marker='s', mfc='w', ms=7,\\n\" +\r\n                \"             capsize=3, mec='k', label=\\\"$Water$\\\")\\n\" +\r\n                \"ax1.errorbar(x, y4, yerr=7, lw=1, ecolor='k', color='k', marker='^', mfc='w', ms=10,\\n\" +\r\n                \"             capsize=3, mec='k', label=\\\"$Precipitate$\\\")\\n\" +\r\n                \"ax1.set_ylabel(\\\"PFOA amount (g)\\\", fontdict={'weight': 'bold', 'size': 13})\\n\" +\r\n                \"# 开启次坐标轴\\n\" +\r\n                \"plt.minorticks_on()\\n\" +\r\n                \"# plt.legend(frameon=False, bbox_to_anchor=(0.915, 1)\\n\" +\r\n                \"# 获取子图1的图例句柄和标签值\\n\" +\r\n                \"handles_1, labels_1 = ax1.get_legend_handles_labels()\\n\" +\r\n                \"# 设置次坐标轴的相关参数\\n\" +\r\n                \"plt.gca().get_xaxis().set_minor_locator(MultipleLocator(1))\\n\" +\r\n                \"plt.gca().get_yaxis().set_major_locator(MultipleLocator(40))\\n\" +\r\n                \"plt.gca().get_yaxis().set_minor_locator(MultipleLocator(20))\\n\" +\r\n                \"# 设置 x轴和y轴刻度的相关参数\\n\" +\r\n                \"plt.tick_params(which='minor', axis='x', direction='in')\\n\" +\r\n                \"plt.tick_params(which='minor', axis='y', direction='in')\\n\" +\r\n                \"plt.tick_params(which='major', axis='x', length=4)\\n\" +\r\n                \"plt.tick_params(which='major', axis='y', length=4)\\n\" +\r\n                \"# plt.annotate(xy=(0, 0), xytext=(14, 160), text=\\\"$y=x^2$\\\",\\n\" +\r\n                \"#              arrowprops={\\\"width\\\": 2, \\\"headlength\\\": 5, \\\"headwidth\\\": 5,\\n\" +\r\n                \"#\\n\" +\r\n                \"#                          \\\"shrink\\\": 0.05})\\n\" +\r\n                \"# 生成右侧的纵坐标，当前画图将以右侧为准\\n\" +\r\n                \"ax2 = plt.twinx()\\n\" +\r\n                \"# 设置 右侧y轴的坐标轴范围\\n\" +\r\n                \"plt.ylim(ymax=7)\\n\" +\r\n                \"line4 = plt.errorbar(x, y2, lw=1, yerr=7 * k, marker='o', mfc='b', ms=10, capsize=3, label=\\\"$Residual turbidity$\\\")\\n\" +\r\n                \"\\n\" +\r\n                \"plt.gca().get_yaxis().set_minor_locator(MultipleLocator(0.5))\\n\" +\r\n                \"# 设置右侧纵坐标的y轴参数\\n\" +\r\n                \"plt.tick_params(which='minor', axis='y', direction='in')\\n\" +\r\n                \"plt.tick_params(which='major', axis='y', length=4)\\n\" +\r\n                \"ax2.set_ylabel(\\\"Residual turbidity (NTU)\\\", fontdict={'weight': 'bold', 'color': 'blue', 'size': 13})\\n\" +\r\n                \"ax2.spines['right'].set_color('blue')\\n\" +\r\n                \"# plt.legend(frameon=False, bbox_to_anchor=(1, 0.85))\\n\" +\r\n                \"# 获得子图的图例句柄和标签值\\n\" +\r\n                \"handles_2, labels_2 = ax2.get_legend_handles_labels()\\n\" +\r\n                \"# 将两个图例合并\\n\" +\r\n                \"plt.legend(handles=handles_1 + handles_2, bbox_to_anchor=(0.1, 1))\\n\" +\r\n                \"# 绘制标题栏\\n\" +\r\n                \"plt.title(\\\"PACl dose (mg/L)\\\", fontdict={'weight': 'bold', 'size': 15})\\n\" +\r\n                \"\\n\" +\r\n                \"plt.show()\\n\" +\r\n                \"fig.savefig('p2.svg', bbox_inches='tight')\\n\" +\r\n                \"\\n\" +\r\n                \"```\\n\" +\r\n                \"\\n\" +\r\n                \"\\n\" +\r\n                \"\\n\" +\r\n                \"```python\\n\" +\r\n                \"import kwargs as kwargs\\n\" +\r\n                \"import numpy as np\\n\" +\r\n                \"from brokenaxes import brokenaxes\\n\" +\r\n                \"from matplotlib import pyplot as plt\\n\" +\r\n                \"from matplotlib.pyplot import minorticks_on\\n\" +\r\n                \"from matplotlib.ticker import MultipleLocator\\n\" +\r\n                \"\\n\" +\r\n                \"# 此处使用numpy生成一组数列，这是x轴的值，是左闭右开的\\n\" +\r\n                \"x = np.arange(0, 25, 5)\\n\" +\r\n                \"# 设置y轴的值\\n\" +\r\n                \"y1 = [0.8, 0, 0, 0, 0]\\n\" +\r\n                \"y2 = [6.5, 2.5, 0.8, 0, 0]\\n\" +\r\n                \"y3 = [370, 90, 8.2, 1.3, 0]\\n\" +\r\n                \"# 生成图像和两个子图，第一个子图有两列，第二个子图有一列，ax1会在ax2下方显示\\n\" +\r\n                \"fig, (ax2, ax1) = plt.subplots(2, 1, sharex=True)\\n\" +\r\n                \"# 为整个图像添加一个大的子图，只是为了能够添加y轴的标题\\n\" +\r\n                \"fig.add_subplot(211, frameon=False)\\n\" +\r\n                \"# 隐藏ax1上方的坐标轴\\n\" +\r\n                \"ax1.spines['top'].set_visible(False)\\n\" +\r\n                \"# 隐藏 ax2的底部坐标轴\\n\" +\r\n                \"ax2.spines['bottom'].set_visible(False)\\n\" +\r\n                \"# 将次坐标轴打开\\n\" +\r\n                \"minorticks_on()\\n\" +\r\n                \"# 设置x轴和y轴的主次坐标轴间隔\\n\" +\r\n                \"ax1.xaxis.set_major_locator(MultipleLocator(5))\\n\" +\r\n                \"ax1.xaxis.set_minor_locator(MultipleLocator(2.5))\\n\" +\r\n                \"ax1.yaxis.set_minor_locator(MultipleLocator(2))\\n\" +\r\n                \"# 设置ax1和ax2的y轴范围\\n\" +\r\n                \"ax1.set_ylim(0, 8.5)\\n\" +\r\n                \"ax2.set_ylim(95, 400)\\n\" +\r\n                \"# 隐藏ax2的x轴刻度线\\n\" +\r\n                \"ax2.tick_params(which='both', axis='x', length=0)\\n\" +\r\n                \"# 绘制误差线\\n\" +\r\n                \"ax1.errorbar(x, y1, yerr=0.4, fmt='k-s', lw=0.8, mfc='w', mec='k', capsize=2, elinewidth=0.2, ms=7,\\n\" +\r\n                \"             label='0.5 mg/L PFOA')\\n\" +\r\n                \"ax2.errorbar(x, y1, yerr=0.4, fmt='k-s', lw=0.8, mfc='w', mec='k', capsize=2, elinewidth=0.2, ms=7,\\n\" +\r\n                \"             label='0.5 mg/L PFOA')\\n\" +\r\n                \"ax1.errorbar(x, y2, yerr=0.4, fmt='k-o', lw=0.8, mfc='w', mec='k', capsize=2, elinewidth=0.2, ms=7,\\n\" +\r\n                \"             label='1 mg/L PFOA')\\n\" +\r\n                \"ax2.errorbar(x, y2, yerr=0.4, fmt='k-o', lw=0.8, mfc='w', mec='k', capsize=2, elinewidth=0.2, ms=7,\\n\" +\r\n                \"             label='1 mg/L PFOA')\\n\" +\r\n                \"ax1.errorbar(x, y3, yerr=0.4, fmt='b-^', lw=0.8, mfc='w', ecolor='blue', mec='b', capsize=2, elinewidth=0.2, ms=7,\\n\" +\r\n                \"             label='3mg/L PFOA')\\n\" +\r\n                \"ax2.errorbar(x, y3, yerr=0.4, fmt='b-^', lw=0.8, mfc='w', ecolor='blue', mec='b', capsize=2, elinewidth=0.2, ms=7,\\n\" +\r\n                \"             label='3mg/L PFOA')\\n\" +\r\n                \"# 绘制两条斜杠，表示坐标轴之间不连续\\n\" +\r\n                \"d = 0.015\\n\" +\r\n                \"# 下面这句话是一个字典，表示以整个坐标轴的长度为单位1，颜色设为黑色\\n\" +\r\n                \"kwargs = dict(transform=ax2.transAxes, color='k', clip_on=False, lw=0.8)\\n\" +\r\n                \"ax2.plot((-d, +d), (-d, +d), **kwargs)  # top-left diagonal\\n\" +\r\n                \"\\n\" +\r\n                \"kwargs.update(transform=ax1.transAxes)  # switch to the bottom axes\\n\" +\r\n                \"ax1.plot((-d, +d), (1 - d, 1 + d), **kwargs)  # bottom-left diagonal\\n\" +\r\n                \"\\n\" +\r\n                \"ax1.plot((1, 1), (1, 1 + 20 * d), **kwargs)\\n\" +\r\n                \"\\n\" +\r\n                \"# What's cool about this is that now if we vary the distance between\\n\" +\r\n                \"# ax and ax2 via f.subplots_adjust(hspace=...) or plt.subplot_tool(),\\n\" +\r\n                \"# the diagonal lines will move accordingly, and stay right at the tips\\n\" +\r\n                \"# of the spines they are 'breaking'\\n\" +\r\n                \"ax2.legend()\\n\" +\r\n                \"# 将大子图的x轴 y轴 ,刻度线全部隐藏\\n\" +\r\n                \"plt.tick_params(labelcolor='none', top='off', bottom='off', left='off', right='off')\\n\" +\r\n                \"plt.tick_params(which='both', length=0)\\n\" +\r\n                \"\\n\" +\r\n                \"plt.title(\\\"PAC dose (mg/L)\\\", size='14', weight='bold')\\n\" +\r\n                \"fig.text(0.04, 0.5, 'PFOA in water (g/L)', size='15', weight='bold', ha='center', va='center', rotation='vertical')\\n\" +\r\n                \"\\n\" +\r\n                \"plt.show()\\n\" +\r\n                \"plt.title(\\\"PAC dose (mg/L)\\\")\\n\" +\r\n                \"# 下面表示dpi表示像素密度，当时保存为矢量图就不存在像素的概念了\\n\" +\r\n                \"fig.savefig('p3.svg', dpi=600)\\n\" +\r\n                \"\\n\" +\r\n                \"```\\n\"\r\n        }\r\n    ]\r\n}"],"sourceRoot":""}